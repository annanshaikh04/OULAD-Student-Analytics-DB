# -*- coding: utf-8 -*-
"""DATA_NORMALIZATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OXkNbdF_jpTr2l-gccr-7xRf1jsrsWNy
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import os

path = "/content/drive/MyDrive/Data Management/Dataset/"
df = pd.read_csv(path + "studentInfo.csv")
df.shape

df.columns

unique_values_dict = {col:df[col].nunique() for col in df.columns}
unique_values_dict

personal_cols = ['id_student','gender','region','highest_education','age_band','disability']
academic_cols = [col for col in df.columns if col not in personal_cols] + ['id_student']

Student_Personal = df[personal_cols].drop_duplicates()
Student_Academic = df[academic_cols].drop_duplicates()

print(Student_Personal.shape)
print(Student_Academic.shape)

def normslize_age_band(age_band):
  if age_band == '0-35':
    return '0-34'
  elif age_band == '35-55':
    return '35-54'
  elif age_band == '55<':
    return '55+'
  else:
    return age_band

Student_Personal['normalised_age_band'] = Student_Personal['age_band'].apply(normslize_age_band)
conflict_students = Student_Personal.groupby('id_student')['normalised_age_band'].nunique()
conflicting_ids = conflict_students[conflict_students > 1].index
Student_Personal = Student_Personal[~Student_Personal['id_student'].isin(conflicting_ids)].drop(columns=['age_band']).drop_duplicates()
Student_Personal.shape

Student_Academic.reset_index(inplace=True)
Student_Academic.sort_values(by='id_student',ascending=True,inplace=True)
Student_Academic.reset_index(inplace=True)
Student_Academic.rename(columns={'index':'enrollment_id'},inplace=True)
Student_Academic.set_index('enrollment_id',inplace=True)
Student_Personal.sort_values(by='id_student',ascending=True,inplace=True)
Student_Personal.set_index('id_student',inplace=True)

Student_Academic.sort_values(by='enrollment_id',ascending=True,inplace=True)
Student_Academic.drop(columns=['level_0'],inplace=True)
Student_Academic

Student_Personal

Student_Personal.to_csv("STUDENT_PERSONAL.csv")
Student_Academic.to_csv("STUDENT_ACADEMIC.csv")

reg_df = pd.read_csv(path + "studentRegistration.csv")
reg_df.shape

reg_df.columns

reg_unique_values_dict = {col:reg_df[col].nunique() for col in reg_df.columns}
reg_unique_values_dict

reg_df.reset_index(inplace=True)
reg_df.rename(columns={'index':'Registration_id'},inplace=True)
reg_df.set_index('Registration_id',inplace=True)
# reg_df.drop(columns=['level_0'],inplace=True)
reg_df

reg_df.to_csv("STUDENT_REGISTRATION.csv")

assesment_df = pd.read_csv(path + "studentAssessment.csv")
assesment_df.shape

assesment_df.columns

unique_values_dict = {col:assesment_df[col].nunique() for col in assesment_df.columns}
unique_values_dict

assesment_df

assessments = pd.read_csv(path + "assessments.csv")
assessments

unique_values_dict = {col:assessments[col].nunique() for col in assessments.columns}
unique_values_dict

assessments.sort_values(by='id_assessment',ascending=True,inplace=True)
assessments.reset_index(inplace=True)
assessments.set_index('id_assessment',inplace=True)
assessments.drop(columns=['index'],inplace=True)
assessments

assessments.to_csv('ASSESSMENTS.csv')

courses = pd.read_csv(path + "courses.csv")
courses

unique_values_dict = {col:courses[col].nunique() for col in courses.columns}
unique_values_dict

courses.shape

co = courses.copy()
co.drop(columns=['module_presentation_length'],inplace=True)
co.drop_duplicates(inplace=True)
co.shape

stu_vle = pd.read_csv(path + "studentVle.csv")
stu_vle.shape

unique_values_dict = {col:stu_vle[col].nunique() for col in stu_vle.columns}
unique_values_dict

stu_vle

s = stu_vle[['id_student','id_site']].copy()

s.drop_duplicates(inplace=True)
s.shape

vle = pd.read_csv(path + "vle.csv")
vle

unique_values_dict = {col:vle[col].nunique() for col in vle.columns}
unique_values_dict

vle.sort_values(by='id_site',ascending=True,inplace=True)
vle.reset_index(inplace=True)
vle.set_index('id_site',inplace=True)
vle.drop(columns=['index'],inplace=True)
vle

vle.to_csv('VLE.csv')

PATH =  "/content/drive/MyDrive/Data Management/Dataset/Normalized/STUDENT_PERSONAL.csv"
df = pd.read_csv(PATH)
df.columns